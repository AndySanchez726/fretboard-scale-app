{"version":3,"sources":["assets/tunings.js","components/Selector/index.js","App.js","reportWebVitals.js","index.js"],"names":["tunings","string","tuning","name","instrument","Selector","allScaleTypes","ScaleType","names","useState","noteDropdown","scaleDropdown","stringNoteDropdown","numberOfStringsDropdown","tuningDropdown","formState","setFormState","fretboardChroma","stringOffsetArray","scaleArray","handleChange","e","target","value","offsetFunction","root","array","j","length","stringChromaOffset","push","i","offset","pointer","id","onSubmit","preventDefault","fretboardDiv","document","getElementById","firstChild","removeChild","Note","chroma","fullScale","Scale","get","tuningArray","split","tuningChroma","textContent","notes","scaleChroma","map","chromaNote","fretboard","createElement","node","createTextNode","appendChild","fullScaleChroma","scaleObject","Object","base","toSearch","stringNumber","reverse","className","newStringArray","noteDiv","p","matchedFrets","visibleFretEl","fretNode","hiddenFretEl","frets","fret","innerHTML","matchArrays","numberOfStringDropdown","onChange","disabled","selected","note","scale","Button","type","variant","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0cb98894.chunk.js","sourcesContent":["const tunings = [\n        {\n            string: 6,\n            tuning: ['E', 'A', 'D', 'G', 'B', 'E'],\n            name: 'Standard',\n            instrument: 'Guitar'\n        },\n        {\n            string: 6,\n            tuning: ['D', 'A', 'D', 'G', 'B', 'E'],\n            name: 'Drop D',\n            instrument: 'Guitar'\n        },\n        {\n            string: 6,\n            tuning: ['C', 'G', 'C', 'F', 'A', 'D'],\n            name: 'Drop C',\n            instrument: 'Guitar'\n        },\n        {\n            string: 6,\n            tuning: ['B', 'Gb', 'B', 'E', 'Ab', 'Db'],\n            name: 'Drop B',\n            instrument: 'Guitar'\n        },\n        {\n            string: 6,\n            tuning: ['A', 'E', 'A', 'D', 'F#', 'B'],\n            name: 'Drop A',\n            instrument: 'Guitar'\n        },\n        {\n            string: 7,\n            tuning: ['A', 'E', 'A', 'D', 'G', 'B', 'E'],\n            name: 'Drop A',\n            instrument: 'Guitar'\n        },\n        {\n            string: 4,\n            tuning: ['E', 'A', 'D', 'G'],\n            name: 'Standard',\n            instrument: 'Bass'\n        }\n    ]\n\nexport { tunings };","import React, { useState } from 'react';\nimport { Scale, Note, ScaleType } from '@tonaljs/tonal';\nimport { tunings } from '../../assets/tunings.js'\nimport { Button, Container, Row, Col } from 'react-bootstrap'\n\n\nfunction Selector() {\n    const allNotes = ['Ab', 'A', 'A#', 'Bb', 'B', 'C', 'C#', 'Db', 'D', 'D#', 'Eb', 'E', 'F', 'F#', 'Gb', 'G', 'G#']\n    const allScaleTypes = ScaleType.names();\n    const [formState, setFormState] = useState({noteDropdown: '', scaleDropdown:'', stringNoteDropdown: '', numberOfStringsDropdown: '', tuningDropdown:['']})\n    const {noteDropdown, scaleDropdown} = formState\n    var fretboardChroma = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    var stringOffsetArray = []\n    const scaleArray = []\n\n    function handleChange(e) {\n        setFormState({...formState, [e.target.name]: e.target.value})\n    }\n        \n    function handleSubmit(e) {\n        e.preventDefault()\n        var fretboardDiv = document.getElementById('fretboard')\n        // clears fretboard\n        while(fretboardDiv.firstChild) {\n            fretboardDiv.removeChild(fretboardDiv.firstChild)\n        }\n        var stringNote = Note.chroma(formState.stringNoteDropdown)\n        var fullScale = Scale.get(formState.noteDropdown + ' ' + formState.scaleDropdown)\n        var tuningArray = formState.tuningDropdown.split(/(?=[A-Z])/)\n        var tuningChroma = []\n        // turns selected tuning into chroma\n        for ( var i = 0; i < tuningArray.length; i++) {\n            tuningChroma.push(Note.chroma(tuningArray[i]))\n        }\n        document.getElementById('noteSpan').textContent = formState.noteDropdown\n        document.getElementById('scaleSpan').textContent = formState.scaleDropdown\n        document.getElementById('fullScale').textContent = fullScale.notes\n        var scaleChroma = fullScale.notes.map(chromaNote => (\n            Note.chroma(chromaNote)\n        ))\n        var fretboard = document.createElement('p')\n        var node = document.createTextNode(scaleChroma)\n        fretboard.appendChild(node)\n        document.getElementById('fretboard').appendChild(fretboard)\n        var fullScaleChroma = []\n        // creates object for the scale\n        for (var i = 0; i < fullScale.notes.length; i++) {\n            fullScaleChroma.push(Note.chroma(fullScale.notes[i]))\n            const scaleObject = new Object();\n            scaleObject.chroma = Note.chroma(fullScale.notes[i])\n            scaleObject.name = fullScale.notes[i]\n            scaleArray.push(scaleObject)\n        }\n        var noteChroma = Note.chroma(formState.noteDropdown)\n        offsetFunction(tuningChroma, fretboardChroma)\n        matchArrays(stringOffsetArray, fullScaleChroma, formState.numberOfStringDropdown, fullScale);\n    }\n\n    // hides and shows notes in the scale\n    function matchArrays(base, toSearch, stringNumber, fullScale) {\n        // reverses the orientation of the strings \n        var reverseBase = base.reverse();\n        var fretboardDiv = document.getElementById('fretboard')\n        // loop through strings \n        for ( var j = 0; j < base.length; j++) {\n            var  string = 'string' + j\n            string = document.createElement('div')\n            string.className = ('String', 'row')\n            fretboardDiv.appendChild(string)\n            var newStringArray = (base[j].[0])\n            // loop through notes on string match to scale chroma\n            for (var i = 0; i < newStringArray.length ; i++) {   \n                var noteDiv = document.createElement('div')\n                noteDiv.className = 'col'\n                for (var p = 0; p < scaleArray.length; p++) {\n                    var matchedFrets = scaleArray[p].chroma === newStringArray[i]\n                    if(matchedFrets) {\n                        break;\n                    }\n                }\n                if(matchedFrets) {\n                    var visibleFretEl = document.createElement('span')\n                    visibleFretEl.className = 'visible'\n                    var fretNode = document.createTextNode(scaleArray[p].name)\n                    visibleFretEl.appendChild(fretNode)\n                    noteDiv.appendChild(visibleFretEl)\n                    string.appendChild(noteDiv)\n                } else {\n                    var hiddenFretEl = document.createElement('span')\n                    hiddenFretEl.className = 'hidden'\n                    var fretNode = document.createTextNode(newStringArray[i])\n                    hiddenFretEl.appendChild(fretNode)\n                    noteDiv.appendChild(hiddenFretEl)\n                    string.appendChild(noteDiv)\n                }   \n            }\n        }\n            var frets = document.createElement('div')\n            frets.className = 'row'\n            for(var i = 0; i<12; i++) {\n                var fret = document.createElement('div')\n                fret.className = 'col'\n                fret.innerHTML = i+1\n                frets.appendChild(fret)\n            }\n            fretboardDiv.appendChild(frets)\n\n\n    }\n    // rearranges the fretboard based on the offset\n    const offsetFunction = function (root, array) {\n        for (var j = 0; j < root.length; j++) {\n            var stringChromaOffset = []\n            stringOffsetArray.push([stringChromaOffset])\n            for (var i = 0; i < array.length; i++) {\n                if (root[j] === array[i]) {\n                    var offset = i\n                }\n            }\n            for (var i = 0; i < array.length; i++) {\n                var pointer = (i + offset) % array.length;\n                stringChromaOffset.push(array[pointer]);\n            }  \n        }\n    };\n\n    return (\n        <div id='main'>\n            <h1>Choose a Scale</h1>\n            <form onSubmit={handleSubmit}>\n                {/* root note dropdown */}\n                <select name=\"noteDropdown\" id=\"noteDropdown\" onChange={handleChange}>\n                    <option disabled selected value> -Note- </option>\n                    {allNotes.map(note => (\n                        <option name='note' value={note}>{note}</option>\n                    ))}\n                </select>\n                {/* scale dropdown */}\n                <select name=\"scaleDropdown\" id=\"scaleDropdown\" onChange={handleChange}>\n                    <option disabled selected value> -Scale- </option>\n                    {allScaleTypes.map(scale => (\n                        <option name='scale' value={scale}>{scale}</option>\n                    ))}\n                </select>\n                <select name='tuningDropdown' id='tuningDropdown' onChange={handleChange}>\n                    <option disabled selected value> -Tunings- </option>\n                    {tunings.map(tuning => (\n                        <option name={tuning.tuning}>{[tuning.tuning]}</option>\n                    ))}\n                </select>\n                <Button type='submit' variant='primary'>Go</Button>\n            </form>\n            <p id='noteSpan'></p>\n            <p id='scaleSpan'></p>\n            <p id='fullScale'></p>\n            {/* <div id='fretboard'></div> */}\n            <Container id='fretboard'>\n            </Container>\n        </div>\n    );\n}\n\nexport default Selector;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Selector from './components/Selector';\n\n\nfunction App() {\n  return (\n    <Selector></Selector>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}